name: 'New deployment tool'
description: 'Deploy your project with ease'

inputs:
  github_token:
    description: 'GITHUB_TOKEN or a repo scoped PAT.'
    default: ${{ github.token }}
  version:
    description: 'Version of the CLI to use.'
    default: 'alpha' # using branch name for now for easier deployments 
  deploy_commands:
    description: 'List of commands to run to deploy your project.'
    required: true
    default: ''
  analyze_commits_config:
    description: 'Configure the behavior when analyzing commits.'
    default: ''
  simulated_merge_type:
    description: 'When running in a pull request, what type of merge to simulate to run the tool in test mode. Note: This input option is planned to go away in favor of reading github repo settings. Options: merge, squash, rebase.'
    default: 'merge' # options: merge, squash, rebase
  make_pull_request_comment:
    description: 'If a pull request comment should be made. Value is string values "true" or "false".'
    default: 'true'

outputs:
  new_release_version:
    description: 'If a new release was created, this is the version of that release.'
    value: ${{ steps.deployment.outputs.new_release_version }}
  test_mode_on:
    description: 'If test mode was on when the tool ran. Value is string values "true" or "false".'
    value: ${{ steps.deployment.outputs.test_mode_on }}

runs:
  using: "composite"
  steps:
    - name: Install Deno runtime to run the CLI
      uses: denoland/setup-deno@v1
      with:
        deno-version: v2.x

    - name: Compile the CLI
      run: deno task compile
      shell: bash

    - name: Find pull request comment previously created, if there is one. 
      if: ${{ github.event_name == 'pull_request' }}
      uses: peter-evans/find-comment@v3
      id: find-comment
      with:
        issue-number: ${{ github.event.pull_request.number }}
        comment-author: 'github-actions[bot]'
        body-includes: '<!-- new-deployment-tool-deploy-run-output-${{ inputs.simulated_merge_type }} -->'
        token: ${{ inputs.github_token }}  
        
    - name: Create or update pull request comment with new deployment tool output
      uses: peter-evans/create-or-update-comment@v4
      id: create-or-update-comment
      if: ${{ github.event_name == 'pull_request' && inputs.make_pull_request_comment == 'true' }}
      with:
        comment-id: ${{ steps.find-comment.outputs.comment-id }}
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          <!-- new-deployment-tool-deploy-run-output-${{ inputs.simulated_merge_type }} -->
          ## New deployment tool results
          Running deployment, simulating ${{ inputs.simulated_merge_type }} for merging...refresh webpage to see results when done. 
        edit-mode: replace

    - name: Run deployment tool 
      # Deno's runtime permissions are a great feature. It would be nice to take advantage of it, however, it may not be possible with future features like running plugins. 
      #
      # The directories we are giving permission to read and write to are the temp directories for all of the OSes that GitHub Actions supports. /tmp for linux and /var/folders for macOS.
      run: ./deployer
      id: deployment
      shell: bash 
      env:
        INPUT_GITHUB_TOKEN: ${{ inputs.github_token }}
        INPUT_DEPLOY_COMMANDS: ${{ inputs.deploy_commands }}
        INPUT_ANALYZE_COMMITS_CONFIG: ${{ inputs.analyze_commits_config }}

    - name: Pull request comment if the deployment failed 
      uses: peter-evans/create-or-update-comment@v4
      if: ${{ inputs.make_pull_request_comment == 'true' && steps.deployment.outputs.test_mode_on == 'true' && steps.deployment.outcome != 'success' }}
      with:
        comment-id: ${{ steps.create-or-update-comment.outputs.comment-id }}
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          <!-- new-deployment-tool-deploy-run-output-${{ inputs.simulated_merge_type }} -->
          ## New deployment tool results 
          游뛂 There was a failure when running the deployment. Check [the logs](https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}) to see what went wrong.
        edit-mode: replace

    - name: Pull request comment if there will be a release
      uses: peter-evans/create-or-update-comment@v4
      if: ${{ inputs.make_pull_request_comment == 'true' && steps.deployment.outputs.test_mode_on == 'true' && steps.deployment.outcome == 'success' && steps.deployment.outputs.new_release_version != '' }}
      with:
        comment-id: ${{ steps.create-or-update-comment.outputs.comment-id }}
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          <!-- new-deployment-tool-deploy-run-output-${{ inputs.simulated_merge_type }} -->
          ## New deployment tool results
          游뚹 If this pull request and all of it's parent pull requests are merged using the 游릴 **${{ inputs.simulated_merge_type }}** 游릴 merge method, a new release will be created.

          The next version of the project will be: **${{ steps.deployment.outputs.new_release_version }}**
        edit-mode: replace

    - name: Pull request comment if there will not be a release
      uses: peter-evans/create-or-update-comment@v4
      if: ${{ inputs.make_pull_request_comment == 'true' && steps.deployment.outputs.test_mode_on == 'true' && steps.deployment.outcome == 'success' && steps.deployment.outputs.new_release_version == '' }}
      with:
        comment-id: ${{ steps.create-or-update-comment.outputs.comment-id }}
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          <!-- new-deployment-tool-deploy-run-output-${{ inputs.simulated_merge_type }} -->
          ## New deployment tool results
          游꺖 Merging this pull request and all of it's parent pull requests using the 游릴 **${{ inputs.simulated_merge_type }}** 游릴 merge method will not trigger a new release. This code would be shipped in a future release.
        edit-mode: replace

