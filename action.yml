name: 'decaf'
description: 'Deploy your project with ease'

inputs:
  github_token:
    description: 'GITHUB_TOKEN or a repo scoped PAT.'
    default: ${{ github.token }}
  git_config:
    description: 'The committer name and email address in the format Display Name <email@address.com>. Defaults to the GitHub Actions bot user on github.com. Tool will set this as the committer for any git operations that you make in your deploy script. Else, provide an empty string for tool to not configure git.'
    default: 'github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>'
  deploy:
    description: 'Command to run to deploy your project.'
    required: true
    default: ''
  get_latest_release_current_branch:
    description: 'Command to run to get the latest release version for the current branch.'
    default: ''
  get_next_release_version:
    description: 'Command to run to get the next release version.'
    default: ''
  simulated_merge_type:
    description: 'When running in a pull request, what type of merge to simulate to run the tool in test mode. Note: This input option is planned to go away in favor of reading github repo settings. Options: merge, squash, rebase.'
    default: 'merge' # options: merge, squash, rebase
  make_pull_request_comment:
    description: 'If a pull request comment should be made. Value is string values "true" or "false".'
    default: 'true'
  local_binary_path:
    description: 'If you want to use a local binary instead of downloading the latest release from GitHub. Value is path to the binary.'
    default: ''
  fail_on_deploy_verification:
    description: 'After deployment commands run, the tool will re-run get latest release command and compare returned version to version just deployed. This option determines if the tool should fail if the versions do not match compared to simply showing a warning. Value is string values "true" or "false". Default is "true". Always "false" in test mode.'
    default: 'true'
  branch_filters:
    description: 'Comma-separated list of regex patterns to filter which branches to analyze for commits. Empty string means analyze all branches (default behavior). Example: "main,develop,feature/*,release/*". Branches not matching any pattern will have empty commit arrays in the input data.'
    default: ''
  commit_limit:
    description: 'Maximum number of commits to retrieve and parse for each branch. This helps improve performance for repositories with many commits. Default is 500.'
    default: ''
  debug_file:
    description: 'Path to a file where log messages will be written. If not provided, log messages will not be written to a file.'
    default: ''

outputs:
  new_release_version:
    description: 'If a new release was created, this is the version of that release.'
    value: ${{ steps.deployment.outputs.new_release_version }}
  test_mode_on:
    description: 'If test mode was on when the tool ran. Value is string values "true" or "false".'
    value: ${{ steps.deployment.outputs.test_mode_on }}

runs:
  using: "composite"
  steps:  
    - name: Download deployment tool binary
      if: ${{ inputs.local_binary_path == '' }}
      # Run the install script that is packed with the tool. Because we want to install the version of the tool that is associated with the git tag that the action is running from. 
      # When this file runs, it was more then likely run from a github release tag. So a specific version of the tool is meant to be run. 
      # We need to know at runtime what version of the tool to run. Because github actions downloads all the code for a git tag, we can get the version from the install script.
      run: ./install 
      shell: bash

    - name: Run deployment tool 
      # Deno's runtime permissions are a great feature. It would be nice to take advantage of it, however, it may not be possible with future features like running plugins. 
      #
      # The directories we are giving permission to read and write to are the temp directories for all of the OSes that GitHub Actions supports. /tmp for linux and /var/folders for macOS.
      run: |
        ./decaf \
          --github_token "${{ inputs.github_token }}" \
          --git_config "${{ inputs.git_config }}" \
          --deploy "${{ inputs.deploy }}" \
          --get_latest_release_current_branch "${{ inputs.get_latest_release_current_branch }}" \
          --get_next_release_version "${{ inputs.get_next_release_version }}" \
          --simulated_merge_type "${{ inputs.simulated_merge_type }}" \
          --branch_filters "${{ inputs.branch_filters }}" \
          --commit_limit "${{ inputs.commit_limit }}" \
          --debug_file "${{ inputs.debug_file }}"
      shell: bash


