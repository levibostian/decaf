name: 'New deployment tool'
description: 'Deploy your project with ease'

inputs:
  github_token:
    description: 'GITHUB_TOKEN or a repo scoped PAT.'
    default: ${{ github.token }}
  git_config:
    description: 'The committer name and email address in the format Display Name <email@address.com>. Defaults to the GitHub Actions bot user on github.com. Tool will set this as the committer for any git operations that you make in your deploy script. Else, provide an empty string for tool to not configure git.'
    default: 'github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>'
  deploy:
    description: 'Command to run to deploy your project.'
    required: true
    default: ''
  get_latest_release_current_branch:
    description: 'Command to run to get the latest release version for the current branch.'
    default: ''
  get_next_release_version:
    description: 'Command to run to get the next release version.'
    default: ''
  simulated_merge_type:
    description: 'When running in a pull request, what type of merge to simulate to run the tool in test mode. Note: This input option is planned to go away in favor of reading github repo settings. Options: merge, squash, rebase.'
    default: 'merge' # options: merge, squash, rebase
  make_pull_request_comment:
    description: 'If a pull request comment should be made. Value is string values "true" or "false".'
    default: 'true'
  local_binary_path:
    description: 'If you want to use a local binary instead of downloading the latest release from GitHub. Value is path to the binary.'
    default: ''
  fail_on_deploy_verification:
    description: 'After deployment commands run, the tool will re-run get latest release command and compare returned version to version just deployed. This option determines if the tool should fail if the versions do not match compared to simply showing a warning. Value is string values "true" or "false". Default is "true". Always "false" in test mode.'
    default: 'true'

outputs:
  new_release_version:
    description: 'If a new release was created, this is the version of that release.'
    value: ${{ steps.deployment.outputs.new_release_version }}
  test_mode_on:
    description: 'If test mode was on when the tool ran. Value is string values "true" or "false".'
    value: ${{ steps.deployment.outputs.test_mode_on }}

runs:
  using: "composite"
  steps:  
    - name: Download deployment tool binary
      if: ${{ inputs.local_binary_path == '' }}
      id: download-binary
      run: |
        set -e
        ARCH=$(uname -m)
        OS=$(uname)
        GH_RELEASE_VERSION="1.0.0-alpha.10"
        gh release download "$GH_RELEASE_VERSION" --repo "levibostian/new-deployment-tool" --pattern "bin-$ARCH-$OS" --output new-deployment-tool
        chmod +x new-deployment-tool
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
    - name: Prepare local binary
      if: ${{ inputs.local_binary_path != '' }}
      run: |
        set -e
        cp "${{ inputs.local_binary_path }}" new-deployment-tool
        chmod +x new-deployment-tool
      shell: bash

    - name: Run deployment tool 
      # Deno's runtime permissions are a great feature. It would be nice to take advantage of it, however, it may not be possible with future features like running plugins. 
      #
      # The directories we are giving permission to read and write to are the temp directories for all of the OSes that GitHub Actions supports. /tmp for linux and /var/folders for macOS.
      run: |
        ./new-deployment-tool \
          --github_token "${{ inputs.github_token }}" \
          --git_config "${{ inputs.git_config }}" \
          --deploy "${{ inputs.deploy }}" \
          --get_latest_release_current_branch "${{ inputs.get_latest_release_current_branch }}" \
          --get_next_release_version "${{ inputs.get_next_release_version }}" \
          --simulated_merge_type "${{ inputs.simulated_merge_type }}" 
      shell: bash


