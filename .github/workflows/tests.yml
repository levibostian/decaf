on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Deno
      uses: denoland/setup-deno@v1
      with:
        deno-version: v2.x

    - name: Install dependencies
      run: deno install --frozen

    - name: Run Deno tests
      run: deno task test

    - name: Generate coverage report 
      run: deno coverage --lcov --output=reports/coverage.lcov reports/coverage/

    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: junit-results
        path: reports/junit.xml

    - name: Upload coverage for analysis
      uses: coverallsapp/github-action@v2
      with:
        file: reports/coverage.lcov
      env:
        # try and speedup the action by homebrew not having to do more then it needs when installing the coveralls tool
        HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK: true

    - name: Annotate failed tests
      if: always() # Run with test/lint failures.
      uses: granodigital/report-annotate@v1.0.1
      with:
        reports: |
          junit|reports/junit.xml

  test-it-runs:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' # Only run on PRs, otherwise we will trigger a deployment by accident. 
    permissions:    
      contents: read # only offer read permissions for dry-run to prevent accidental deployments
      pull-requests: write # allow commenting on PRs
    steps:
    - uses: actions/checkout@v4
    - name: Set up Deno
      uses: denoland/setup-deno@v1
      with:
        deno-version: v2.2

    - name: Compile binary 
      run: OUTPUT_FILE_NAME=compiled-binary DENO_TARGET="$(uname -m)-unknown-linux-gnu" deno task compile

    - name: Run deployment, merge method
      uses: ./
      with: 
        simulated_merge_type: 'merge'
        local_binary_path: compiled-binary
        github_token: ${{ secrets.github_token }}
        get_latest_release_current_branch: 'deno run --allow-all steps/get-latest-release/get-latest-release.ts'
        get_next_release_version: 'deno run --allow-all steps/get-next-release/get-next-release.ts --config ''{ "branches": [ { "branch_name": "${{ github.ref_name }}", "prerelease": true, "version_suffix": "test" }, { "branch_name": "main", "prerelease": false }, { "branch_name": "beta", "prerelease": true }, { "branch_name": "alpha", "prerelease": true }]}'''
        deploy_commands: './steps/deploy.ts'

    - uses: actions/checkout@v4
    - name: Run deployment, squash method
      uses: ./      
      with: 
        simulated_merge_type: 'squash'
        local_binary_path: compiled-binary
        github_token: ${{ secrets.github_token }}
        get_latest_release_current_branch: 'deno run --allow-all steps/get-latest-release/get-latest-release.ts'
        get_next_release_version: 'deno run --allow-all steps/get-next-release/get-next-release.ts --config ''{ "branches": [ { "branch_name": "${{ github.ref_name }}", "prerelease": true, "version_suffix": "test" }, { "branch_name": "main", "prerelease": false }, { "branch_name": "beta", "prerelease": true }, { "branch_name": "alpha", "prerelease": true }]}'''
        deploy_commands: './steps/deploy.ts'

    - uses: actions/checkout@v4
    - name: Run deployment, rebase method
      uses: ./      
      with: 
        simulated_merge_type: 'rebase'
        local_binary_path: compiled-binary
        github_token: ${{ secrets.github_token }}
        get_latest_release_current_branch: 'deno run --allow-all steps/get-latest-release/get-latest-release.ts'
        get_next_release_version: 'deno run --allow-all steps/get-next-release/get-next-release.ts --config ''{ "branches": [ { "branch_name": "${{ github.ref_name }}", "prerelease": true, "version_suffix": "test" }, { "branch_name": "main", "prerelease": false }, { "branch_name": "beta", "prerelease": true }, { "branch_name": "alpha", "prerelease": true }]}'''       
        deploy_commands: './steps/deploy.ts'