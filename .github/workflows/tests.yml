on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Deno
      uses: denoland/setup-deno@v1
      with:
        deno-version: v2.x

    - name: Install dependencies
      run: deno install --frozen

    - name: Run Deno tests
      run: deno task test

    - name: Generate coverage report 
      run: deno coverage --lcov --output=reports/coverage.lcov reports/coverage/

    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: junit-results
        path: reports/junit.xml

    - name: Upload coverage for analysis
      uses: coverallsapp/github-action@v2
      with:
        file: reports/coverage.lcov
      env:
        # try and speedup the action by homebrew not having to do more then it needs when installing the coveralls tool
        HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK: true

    - name: Annotate failed tests
      if: always() # Run with test/lint failures.
      uses: granodigital/report-annotate@v1.0.1
      with:
        reports: |
          junit|reports/junit.xml

  test-it-runs:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' # Only run on PRs, otherwise we will trigger a deployment by accident. 
    permissions:    
      contents: read # only offer read permissions for dry-run to prevent accidental deployments
      pull-requests: write # allow commenting on PRs
    steps:
    - uses: actions/checkout@v4
    - name: Run deployment, merge method
      uses: ./      
      with: 
        simulated_merge_type: 'merge'
        github_token: ${{ secrets.github_token }}
        get_latest_release_current_branch: 'deno run --allow-all steps/get-latest-release/get-latest-release.ts'
        # Test that the config is read by the tool and pre-release versions are working. 
        analyze_commits_config: |
          {
            "branches": [
              { "branch_name": "${{ github.ref_name }}", "prerelease": true, "version_suffix": "test" },
              { "branch_name": "main", "prerelease": false },
              { "branch_name": "beta", "prerelease": true },
              { "branch_name": "alpha", "prerelease": true }
            ]
          }

    - uses: actions/checkout@v4
    - name: Run deployment, squash method
      uses: ./      
      with: 
        simulated_merge_type: 'squash'
        github_token: ${{ secrets.github_token }}
        get_latest_release_current_branch: 'deno run --allow-all steps/get-latest-release/get-latest-release.ts'
        # Test that the config is read by the tool and pre-release versions are working. 
        analyze_commits_config: |
          {
            "branches": [
              { "branch_name": "${{ github.ref_name }}", "prerelease": true, "version_suffix": "test" },
              { "branch_name": "main", "prerelease": false },
              { "branch_name": "beta", "prerelease": true },
              { "branch_name": "alpha", "prerelease": true }
            ]
          }

    - uses: actions/checkout@v4
    - name: Run deployment, rebase method
      uses: ./      
      with: 
        simulated_merge_type: 'rebase'
        github_token: ${{ secrets.github_token }}
        get_latest_release_current_branch: 'deno run --allow-all steps/get-latest-release/get-latest-release.ts'
        # Test that the config is read by the tool and pre-release versions are working. 
        analyze_commits_config: |
          {
            "branches": [
              { "branch_name": "${{ github.ref_name }}", "prerelease": true, "version_suffix": "test" },
              { "branch_name": "main", "prerelease": false },
              { "branch_name": "beta", "prerelease": true },
              { "branch_name": "alpha", "prerelease": true }
            ]
          }          